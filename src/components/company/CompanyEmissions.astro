---
import {
  getFormattedReportingPeriod,
  getLatestReportingPeriodWithEmissions,
  type CompanyData,
} from '@/data/companyData'
import { Card } from '../ui/card'
import Scope3Emissions from './Scope3Emissions.astro'
import VerifiedBadge from '../VerifiedBadge.astro'

interface Props {
  company: CompanyData
}

const { company } = Astro.props

const latestEmissions = getLatestReportingPeriodWithEmissions(company)
const emissions = latestEmissions?.emissions

const scope1 = emissions?.scope1
const scope2 = emissions?.scope2
const scope1And2 = emissions?.scope1And2

const hasVerifiedScope1 = scope1?.metadata?.verifiedBy !== null
const hasVerifiedScope2 = scope2?.metadata?.verifiedBy !== null
const hasVerifiedScope1And2 = scope1And2?.metadata?.verifiedBy !== null

const hasScope1 = scope1?.total !== null
const scope2Emissions = scope2?.mb ?? scope2?.lb ?? scope2?.unknown
const hasScope2 = scope2Emissions !== null
const hasScope1And2 = scope1And2?.total

let showSeparateScope1And2 = false

if (hasVerifiedScope1 || hasVerifiedScope2) {
  showSeparateScope1And2 = true
} else if (hasVerifiedScope1And2) {
  showSeparateScope1And2 = false
} else if (hasScope1 || hasScope2) {
  showSeparateScope1And2 = true
} else if (!hasVerifiedScope1And2) {
  showSeparateScope1And2 = false
} else if (!hasScope1 && !hasScope2 && !hasScope1And2) {
  showSeparateScope1And2 = true
}

const scopeEmissionsList = emissions
  ? [
      showSeparateScope1And2
        ? [
            {
              title: 'Egna utsläpp (scope 1)',
              description:
                'Utsläpp från egna källor eller kontrollerade av organisationen.',
              value: scope1?.total,
              verified: Boolean(emissions.scope1?.metadata?.verifiedBy),
            },
            {
              title: 'Indirekta (scope 2)',
              description:
                'Indirekta utsläpp från produktion av köpt el, ånga, värme och kyla som konsumeras av organisationen.',
              value: scope2Emissions,
              verified: Boolean(emissions.scope2?.metadata?.verifiedBy),
            },
          ]
        : {
            title: 'Egna utsläpp (scope 1 plus 2)',
            description:
              'Utsläpp från egna eller kontrollerade källor samt från energi som konsumeras av organisationen.',
            value: scope1And2?.total,
            verified: Boolean(scope1And2?.metadata?.verifiedBy),
          },
      {
        title: 'Värdekedjan (scope 3)',
        description: 'Indirekta utsläpp från organisationens värdekedja.',
        value: emissions.scope3?.calculatedTotalEmissions,
        // verified: Boolean(
        //   emissions.scope3?.calculatedTotalEmissions?.metadata?.verifiedBy,
        // ),
      },
    ].flat()
  : []

const biogenicEmissions = {
  title: 'Biogena utsläpp',
  description:
    'Biogena utsläpp är koldioxidutsläpp som uppstår från icke-fossila (sk. förnybara) källor, som tex förbränning av biobränslen eller biprodukter vid pappersmassatillverkning. Enligt GHG-protokollet redovisas dessa utsläpp separat från scope 1-3, eftersom de är aktiv del av kolets kretslopp.',
  value: emissions?.biogenicEmissions?.total,
  verified: Boolean(emissions?.biogenicEmissions?.metadata?.verifiedBy),
}
---

{
  emissions && (
    <Card class="grid gap-8" level={1}>
      <h2 class="flex items-center justify-between pt-4 text-lg leading-none tracking-tight 2xs:text-xl xs:text-2xl sm:text-3xl md:pt-0">
        Rapporterade utsläpp {getFormattedReportingPeriod(latestEmissions)}
        {/* TODO: Replace units with actual units from the API response, in all locations where ton CO₂e can be found.*/}
        <span class="pr-4 text-base text-muted xs:text-xl">(ton CO₂e)</span>
      </h2>
      {scopeEmissionsList.length ? (
        <div class="grid gap-4">
          {scopeEmissionsList.map((emission) => (
            <div class="flex items-center justify-between">
              <div>
                <h4 class="flex items-center gap-1 font-medium">
                  {emission.title} {emission.verified && <VerifiedBadge />}
                </h4>
                {emission.description && (
                  <p class="text-sm text-muted">{emission.description}</p>
                )}
              </div>
              <span class="rounded-full bg-gray-800 px-4 py-2 font-bold md:text-base">
                {emission.value?.toLocaleString('sv-SE', {
                  maximumFractionDigits: 0,
                }) ?? '-'}
              </span>
            </div>
          ))}
        </div>
      ) : null}

      <Scope3Emissions {company} {emissions} />

      {emissions && (
        <Card level={2}>
          <h4 class="flex items-center justify-between pb-4 text-lg 2xs:text-xl xs:text-2xl">
            <span class="flex items-center justify-start gap-1">
              <span class="flex flex-grow-0">{biogenicEmissions.title}</span>
              {biogenicEmissions.verified && <VerifiedBadge />}
            </span>
            <span class="pr-4 text-base text-muted xs:text-lg">(ton CO₂e)</span>
          </h4>
          <div class="flex items-center justify-between gap-4">
            <p class="text-sm text-muted">{biogenicEmissions.description}</p>
            <span class="self-start rounded-full bg-gray-800 px-4 py-2 font-bold">
              {biogenicEmissions.value?.toLocaleString('sv-SE', {
                maximumFractionDigits: 0,
              }) ?? '-'}
            </span>
          </div>
        </Card>
      )}
    </Card>
  )
}
