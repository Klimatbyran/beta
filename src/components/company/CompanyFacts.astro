---
import {
  getLatestReportingPeriodWithEmissions,
  getLatestReportingPeriodWithEconomy,
  getFormattedReportingPeriod,
  type CompanyData,
  type Emissions,
} from '@/data/companyData'
import { Card } from '../ui/card'
import { isNumber } from '@/lib/utils'

interface Props {
  company: CompanyData
}

const { company } = Astro.props

const latestEmissions = getLatestReportingPeriodWithEmissions(company)
const latestEconomy = getLatestReportingPeriodWithEconomy(company)

// TODO: show the source for every datapoint
// IDEA: Maybe use a common component to click a datapoint to open metadata about it, such as the source
const reportURL = latestEmissions?.reportURL || latestEconomy?.reportURL

function getTotalEmissions(emissions: Emissions) {
  const calculated = emissions.calculatedTotalEmissions
  const stated = emissions.statedTotalEmissions

  if (isNumber(calculated)) {
    if (calculated === 0 && isNumber(stated?.total)) return stated.total
    return calculated
  }
  return null
}

const totalEmissions = latestEmissions?.emissions
  ? getTotalEmissions(latestEmissions.emissions)
  : null
---

<Card class="text-sm" level={1}>
  <h1
    class="text-balance pb-4 pt-4 text-4xl leading-none tracking-tight md:pt-0 lg:text-5xl"
  >
    {company.name}
  </h1>
  <p class="text-muted">{company.description}</p>

  <div class="grid gap-4 pt-4 md:grid-cols-2">
    <Card class="flex flex-col justify-between gap-2" level={2}>
      {
        company.industry?.industryGics?.sv?.subIndustryName && (
          <div class="flex flex-wrap items-center justify-between gap-x-4 gap-y-1 text-sm">
            <h3>Bransch</h3>
            <p class="text-sm text-muted">
              {company.industry?.industryGics?.sv?.subIndustryName}
            </p>
          </div>
        )
      }

      {
        isNumber(latestEconomy?.economy?.turnover?.value) && (
          <div class="flex flex-wrap items-center justify-between gap-x-4 gap-y-1 text-sm">
            <h3>Omsättning ({getFormattedReportingPeriod(latestEconomy)})</h3>
            <p class="text-sm text-orange-250">
              {latestEconomy.economy.turnover.value.toLocaleString('sv-SE', {
                maximumFractionDigits: 0,
              }) +
                ' ' +
                latestEconomy.economy.turnover?.currency}
            </p>
          </div>
        )
      }
      {
        isNumber(latestEconomy?.economy?.employees?.value) && (
          <div class="flex flex-wrap items-center justify-between gap-x-4 gap-y-1 text-sm">
            <h3>
              Antal anställda ({getFormattedReportingPeriod(latestEconomy)})
            </h3>
            <p class="text-sm text-orange-250">
              {latestEconomy.economy.employees?.value?.toLocaleString('sv-SE', {
                maximumFractionDigits: 0,
              })}
              {latestEconomy.economy.employees?.unit}
            </p>
          </div>
        )
      }

      {
        reportURL && (
          <span>
            Läs{' '}
            <a
              href={reportURL}
              class="self-start text-sm text-blue-500 underline"
            >
              hållbarhetsrapport
            </a>
          </span>
        )
      }
    </Card>

    <!-- TODO: Handle both statedTotalEmissions (what the companies report) and calculatedTotalEmissions -->
    {
      isNumber(latestEmissions?.emissions?.calculatedTotalEmissions) && (
        <Card level={2} class="flex flex-col justify-between gap-4">
          <div class="flex items-start justify-between">
            <h3 class="flex items-center gap-1">
              Totala utsläpp {getFormattedReportingPeriod(latestEmissions)}{' '}
              {/* {Boolean(
                latestEmissions.emissions.calculatedTotalEmissions.metadata
                  .verifiedBy,
              ) && <VerifiedBadge />} */}
            </h3>
            <span class="text-muted">(ton CO₂e)</span>
          </div>

          <p class="text-3xl leading-none tracking-tight text-orange-250 sm:text-4xl md:text-5xl lg:text-6xl">
            {totalEmissions
              ? totalEmissions.toLocaleString('sv-SE', {
                  maximumFractionDigits: 0,
                })
              : '-'}
          </p>
        </Card>
      )
    }
  </div>
</Card>
